#include <iostream>
namespace PRINT {
	//---------------------------------------------------------------------------------
	//---------------------------------------------------------------------------------
	void print_Symbol(char symbol) {

		switch (symbol) {
		case ('-'):
			std::cout
				<< "-------------------------------------------------------------------------------------"
				<<
				std::endl;
			break;
		default:
			std::cout
				<< "ОШИБКА! В базе нет такого символа!"
				<< 
				std::endl;
			break;
		}
	}
	void print_Messenger(int num) {

		switch (num) {

		case 1:
			print_Symbol('-');
			std::cout
				<< "  1.Задать целочисленный массив,\n"
				<< "    состоящий из элементов 0 и 1.\n"
				<< "    Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].\n"
				<< "    Написать функцию, \n"
				<< "    заменяющую в принятом массиве 0 на 1, 1 на 0.\n"
				<< "    (** без применения if-else, switch, () ? :);\n"
				<<
				std::endl;
			print_Symbol('-');
			break;
		case 2:
			print_Symbol('-');
			std::cout
				<< "  2.Задать пустой целочисленный массив размером 8.\n"
				<< "    Написать функцию, \n"
				<< "    которая с помощью цикла заполнит его значениями 1 4 7 10 13 16 19 22; \n"
				<<
				std::endl;
			print_Symbol('-');
			break;
		case 3:
			print_Symbol('-');
			std::cout
				<< "  3.Написать метод, в который передается не пустой одномерный целочисленный массив,\n"
				<< "    метод должен вернуть истину если в массиве есть место, \n"
				<< "    в котором сумма левой и правой части массива равны.\n"
				<< "    Примеры :\n"
				<< "    checkBalance([1, 1, 1, || 2, 1]) → true, \n"
				<< "    checkBalance([2, 1, 1, 2, 1]) → false, \n"
				<< "    checkBalance([10, || 1, 2, 3, 4]) → true.\n"
				<< "    Абстрактная граница показана символами || , эти символы в массив не входят.\n"
				<<
				std::endl;
			print_Symbol('-');
			break;
		case 4:
			print_Symbol('-');
			std::cout
				<< "  4.Написать функцию, которой на вход подаётся одномерный массив\n"
				<< "    и число n(может быть положительным, или отрицательным),\n"
				<< "    при этом метод должен циклически сместить все элементы массива на n позиций.\n"
				<<
				std::endl;
			print_Symbol('-');
			break;
		case 5:
			print_Symbol('-');
			std::cout
				<< "  5.Написать функцию из первого задания так,\n"
				<< "    чтобы она работала с аргументом переменной длины\n"
				<<
				std::endl;
			print_Symbol('-');
			break;
		case 6:
			print_Symbol('-');
			std::cout
				<< "  6.Написать все функции в отдельных файлах в одном пространстве имён,\n"
				<< "    вызвать их на исполнение в основном файле программы \n"
				<< "    используя указатели на функции.\n"
				<<
				std::endl;
			print_Symbol('-');
			break;
		default:
			break;
		}
	}
	//---------------------------------------------------------------------------------
	void print_Array(int arrX[], int size) {
		std::cout << std::endl;
		std::cout << "  МАССИВ : ";
		for (int index{ 0 }; index < size; ++index) { std::cout << arrX[index] << "\t"; }
	}
	//---------------------------------------------------------------------------------
	void print_bool(bool x)
	{
		if (x)  std::cout << "--> true  ";
		else 	std::cout << "--> false ";
	}
	//---------------------------------------------------------------------------------
	void print_End_Messeng() {

		std::cout << "\n\n";
		PRINT::print_Symbol('-');
		std::cout << "    ";
	}
}